function MATLc
% Generated by MATL compiler, 04-Jun-2016 19:00:08

% Set initial conditions
warningState = warning;
format compact; format long; warning('off','all'); close all
defaultColorMap = get(0, 'DefaultFigureColormap');
set(0, 'DefaultFigureColormap', gray(256));
rng('shuffle')
delete inout; diary off; delete defout; diary defout
F = false; T = true; P = pi; Y = inf; N = NaN;
numCbM = 4;
defaultInputPrompt = '> ';
implicitInputPrompt = '> ';
STACK = {};
S_IN = 'def'; S_OUT = 'def';
CB_H = { 2 }; CB_I = { 3 }; CB_J = { 1j }; CB_K = { 4 }; CB_L = { {[1 1j]} {[1j -1 1]} {[1 1j-1]} {[2 1j]} {[1 0]} {[2 1j-1]} {[2 3 1]} {[3 1 2]} {[1 2 1j]} {[2 2 1j]} {3600} {86400} {1440} {[31 28 31 30 31 30 31 31 30 31 30 31]} {[31 29 31 30 31 30 31 31 30 31 30 31]} {2*pi} {0.5772156649015328606} {(sqrt(5)+1)/2} };
CB_G = { }; CB_M = repmat({{}},1,numCbM);
if exist('defin','file'), fid = fopen('defin','r'); STACK{end+1} = reshape(fread(fid,inf,'*char'),1,[]); fclose(fid); end

% 2
STACK{end+1} = 2;

% #
nin = 0;
if ~isempty(nin) && (numel(STACK)+nin(1)<1)
implInput = {};
for k = 1:1-numel(STACK)-nin(1)
implInput{k} = input(implicitInputPrompt,'s');
valid = isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-df-ik-zA-EG-MOQ-SU-XZ]', 'once')) && isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-zA-Z]{2}', 'once'));
assert(valid, 'MATL:runner', 'MATL run-time error: input not allowed')
if isempty(implInput{k}), implInput{end} = []; else implInput{k} = eval(implInput{k}); end
end
STACK = [implInput STACK];
CB_G = [CB_G implInput];
clear implInput k
end
S_OUT = STACK{end}; STACK(end) = [];
if isempty(S_OUT), S_OUT = 'def'; end

% Yi
if strcmp(S_IN,'def'), S_IN = 1; end
if strcmp(S_IN,'alt'), error('MATL:runner', 'MATL run-time error: alternative input/output specification not defined for this function' ), end
if isnumeric(S_IN) && numel(S_IN) == 1, if S_IN < 1 || S_IN > inf, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
elseif islogical(S_IN), if nnz(S_IN) < 1 || nnz(S_IN) > inf, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
else error('MATL:runner', 'MATL run-time error: input specification not recognized'), end
if isnumeric(S_IN), nin = -S_IN+1:0; else nin = find(S_IN)-numel(S_IN); end
if ~isempty(nin) && (numel(STACK)+nin(1)<1)
implInput = {};
for k = 1:1-numel(STACK)-nin(1)
implInput{k} = input(implicitInputPrompt,'s');
valid = isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-df-ik-zA-EG-MOQ-SU-XZ]', 'once')) && isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-zA-Z]{2}', 'once'));
assert(valid, 'MATL:runner', 'MATL run-time error: input not allowed')
if isempty(implInput{k}), implInput{end} = []; else implInput{k} = eval(implInput{k}); end
end
STACK = [implInput STACK];
CB_G = [CB_G implInput];
clear implInput k
end
in = STACK(end+nin);
if ~isempty(in), CB_M = [{in} CB_M(1:end-1)]; end
if strcmp(S_OUT,'def'), S_OUT = 1; end
if strcmp(S_OUT,'alt'), error('MATL:runner', 'MATL run-time error: alternative input/output specification not defined for this function' ), end
if isnumeric(S_OUT) && numel(S_OUT) == 1, if S_OUT >= 0 && (S_OUT < 1 || S_OUT > 2*(3)), error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
elseif islogical(S_OUT), if numel(S_OUT) < 1 || numel(S_OUT) > 3, error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
else error('MATL:runner', 'MATL run-time error: output specification not recognized'), end
if isnumeric(S_OUT) && S_OUT > 3, S_OUT = [false(1,S_OUT-(3+1)) true]; end
if isnumeric(S_OUT), nout = S_OUT; else nout = numel(S_OUT); end
if nout>=0, out = cell(1,nout); end
STACK(end+nin) = [];
[out{:}] = imread(in{:});
if islogical(S_OUT), out = out(S_OUT); end
STACK = [STACK out];
S_IN = 'def';
S_OUT = 'def';
clear nin nout in out

% w
if strcmp(S_IN,'def'), S_IN = 2; end
if strcmp(S_IN,'alt'), error('MATL:runner', 'MATL run-time error: alternative input/output specification not defined for this function' ), end
if isnumeric(S_IN) && numel(S_IN) == 1, if S_IN < 0 || S_IN > inf, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
elseif islogical(S_IN), if nnz(S_IN) < 0 || nnz(S_IN) > inf, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
else error('MATL:runner', 'MATL run-time error: input specification not recognized'), end
if isnumeric(S_IN), nin = -S_IN+1:0; else nin = find(S_IN)-numel(S_IN); end
if ~isempty(nin) && (numel(STACK)+nin(1)<1)
implInput = {};
for k = 1:1-numel(STACK)-nin(1)
implInput{k} = input(implicitInputPrompt,'s');
valid = isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-df-ik-zA-EG-MOQ-SU-XZ]', 'once')) && isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-zA-Z]{2}', 'once'));
assert(valid, 'MATL:runner', 'MATL run-time error: input not allowed')
if isempty(implInput{k}), implInput{end} = []; else implInput{k} = eval(implInput{k}); end
end
STACK = [implInput STACK];
CB_G = [CB_G implInput];
clear implInput k
end
in = STACK(end+nin);
if strcmp(S_OUT,'def'), S_OUT = 0; end
if strcmp(S_OUT,'alt'), error('MATL:runner', 'MATL run-time error: alternative input/output specification not defined for this function' ), end
if isnumeric(S_OUT) && numel(S_OUT) == 1, if S_OUT >= 0 && (S_OUT < 0 || S_OUT > 2*(0)), error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
elseif islogical(S_OUT), if numel(S_OUT) < 0 || numel(S_OUT) > 0, error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
else error('MATL:runner', 'MATL run-time error: output specification not recognized'), end
if isnumeric(S_OUT) && S_OUT > 0, S_OUT = [false(1,S_OUT-(0+1)) true]; end
if isnumeric(S_OUT), nout = S_OUT; else nout = numel(S_OUT); end
if nout>=0, out = cell(1,nout); end
if ~isempty(in), in([1 end]) = in([end 1]); STACK(end+nin) = in; end
if islogical(S_OUT), out = out(S_OUT); end
STACK = [STACK out];
S_IN = 'def';
S_OUT = 'def';
clear nin nout in out

% 9
STACK{end+1} = 9;

% B
if strcmp(S_IN,'def'), S_IN = 1; end
if strcmp(S_IN,'alt'), S_IN = 2; end
if isnumeric(S_IN) && numel(S_IN) == 1, if S_IN < 1 || S_IN > 2, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
elseif islogical(S_IN), if nnz(S_IN) < 1 || nnz(S_IN) > 2, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
else error('MATL:runner', 'MATL run-time error: input specification not recognized'), end
if isnumeric(S_IN), nin = -S_IN+1:0; else nin = find(S_IN)-numel(S_IN); end
if ~isempty(nin) && (numel(STACK)+nin(1)<1)
implInput = {};
for k = 1:1-numel(STACK)-nin(1)
implInput{k} = input(implicitInputPrompt,'s');
valid = isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-df-ik-zA-EG-MOQ-SU-XZ]', 'once')) && isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-zA-Z]{2}', 'once'));
assert(valid, 'MATL:runner', 'MATL run-time error: input not allowed')
if isempty(implInput{k}), implInput{end} = []; else implInput{k} = eval(implInput{k}); end
end
STACK = [implInput STACK];
CB_G = [CB_G implInput];
clear implInput k
end
in = STACK(end+nin);
if ~isempty(in), CB_M = [{in} CB_M(1:end-1)]; end
if strcmp(S_OUT,'def'), S_OUT = 1; end
if strcmp(S_OUT,'alt'), S_OUT = 1; end
if isnumeric(S_OUT) && numel(S_OUT) == 1, if S_OUT >= 0 && (S_OUT < 1 || S_OUT > 2*(1)), error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
elseif islogical(S_OUT), if numel(S_OUT) < 1 || numel(S_OUT) > 1, error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
else error('MATL:runner', 'MATL run-time error: output specification not recognized'), end
if isnumeric(S_OUT) && S_OUT > 1, S_OUT = [false(1,S_OUT-(1+1)) true]; end
if isnumeric(S_OUT), nout = S_OUT; else nout = numel(S_OUT); end
if nout>=0, out = cell(1,nout); end
STACK(end+nin) = [];
out{1} = logical(dec2bin(in{:})-'0');
if islogical(S_OUT), out = out(S_OUT); end
STACK = [STACK out];
S_IN = 'def';
S_OUT = 'def';
clear nin nout in out

% #
nin = 0;
if ~isempty(nin) && (numel(STACK)+nin(1)<1)
implInput = {};
for k = 1:1-numel(STACK)-nin(1)
implInput{k} = input(implicitInputPrompt,'s');
valid = isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-df-ik-zA-EG-MOQ-SU-XZ]', 'once')) && isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-zA-Z]{2}', 'once'));
assert(valid, 'MATL:runner', 'MATL run-time error: input not allowed')
if isempty(implInput{k}), implInput{end} = []; else implInput{k} = eval(implInput{k}); end
end
STACK = [implInput STACK];
CB_G = [CB_G implInput];
clear implInput k
end
S_OUT = STACK{end}; STACK(end) = [];
if isempty(S_OUT), S_OUT = 'def'; end

% u
if strcmp(S_IN,'def'), S_IN = 1; end
if strcmp(S_IN,'alt'), error('MATL:runner', 'MATL run-time error: alternative input/output specification not defined for this function' ), end
if isnumeric(S_IN) && numel(S_IN) == 1, if S_IN < 1 || S_IN > 4, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
elseif islogical(S_IN), if nnz(S_IN) < 1 || nnz(S_IN) > 4, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
else error('MATL:runner', 'MATL run-time error: input specification not recognized'), end
if isnumeric(S_IN), nin = -S_IN+1:0; else nin = find(S_IN)-numel(S_IN); end
if ~isempty(nin) && (numel(STACK)+nin(1)<1)
implInput = {};
for k = 1:1-numel(STACK)-nin(1)
implInput{k} = input(implicitInputPrompt,'s');
valid = isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-df-ik-zA-EG-MOQ-SU-XZ]', 'once')) && isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-zA-Z]{2}', 'once'));
assert(valid, 'MATL:runner', 'MATL run-time error: input not allowed')
if isempty(implInput{k}), implInput{end} = []; else implInput{k} = eval(implInput{k}); end
end
STACK = [implInput STACK];
CB_G = [CB_G implInput];
clear implInput k
end
in = STACK(end+nin);
if ~isempty(in), CB_M = [{in} CB_M(1:end-1)]; end
if strcmp(S_OUT,'def'), S_OUT = 1; end
if strcmp(S_OUT,'alt'), error('MATL:runner', 'MATL run-time error: alternative input/output specification not defined for this function' ), end
if isnumeric(S_OUT) && numel(S_OUT) == 1, if S_OUT >= 0 && (S_OUT < 1 || S_OUT > 2*(4)), error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
elseif islogical(S_OUT), if numel(S_OUT) < 1 || numel(S_OUT) > 4, error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
else error('MATL:runner', 'MATL run-time error: output specification not recognized'), end
if isnumeric(S_OUT) && S_OUT > 4, S_OUT = [false(1,S_OUT-(4+1)) true]; end
if isnumeric(S_OUT), nout = S_OUT; else nout = numel(S_OUT); end
if nout>=0, out = cell(1,nout); end
STACK(end+nin) = [];
str = {'stable' 'sorted' 'last' 'first' 'rows'};
for k = 2:numel(in), if isnumeric(in{k}), in(k) = str(in{k}); end; end; clear str
if numel(in)==1 || (numel(in)==2 && strcmp(in{2}, 'rows')), in{end+1} = 'stable'; end
if iscell(in{1}) && ~ischar(in{1}{1})
if numel(in)>=2 && isequal(in{end},'sorted')
n = max(cellfun(@numel, in));
x = cellfun(@(t) [t(:).' -inf(1,n-numel(t))], in{1}, 'uniformoutput', 0);
x = vertcat(x{:});
[~, ind] = sortrows(x); in{1} = in{1}(ind);
end
[ii, jj] = ndgrid(1:numel(in{1}));
ind = ~any(triu(cellfun(@isequal, in{1}(ii), in{1}(jj)),1),1);
y = in{1}(ind); y = y(:);
if ndims(in{1})==2 && size(in{1},1)==1, y = y.'; end
out{1} = y; out = out(1:nout); clear y ii jj
else
[out{1:min(nout,3)}] = unique(in{:});
if nout==4
id = out{3}; count = sum(bsxfun(@eq, id(:), 1:max(id)), 1).';
out{4} = count; clear id count
end
end
if islogical(S_OUT), out = out(S_OUT); end
STACK = [STACK out];
S_IN = 'def';
S_OUT = 'def';
clear nin nout in out

% XD (implicit)
if strcmp(S_IN,'def'), S_IN = numel(STACK); end
if strcmp(S_IN,'alt'), S_IN = 1; end
if isnumeric(S_IN) && numel(S_IN) == 1, if S_IN < 0 || S_IN > inf, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
elseif islogical(S_IN), if nnz(S_IN) < 0 || nnz(S_IN) > inf, error('MATL:runner', 'MATL run-time error: incorrect input specification'), end
else error('MATL:runner', 'MATL run-time error: input specification not recognized'), end
if isnumeric(S_IN), nin = -S_IN+1:0; else nin = find(S_IN)-numel(S_IN); end
if ~isempty(nin) && (numel(STACK)+nin(1)<1)
implInput = {};
for k = 1:1-numel(STACK)-nin(1)
implInput{k} = input(implicitInputPrompt,'s');
valid = isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-df-ik-zA-EG-MOQ-SU-XZ]', 'once')) && isempty(regexp(implInput{k}, '^[^'']*(''[^'']*''[^'']*)*[a-zA-Z]{2}', 'once'));
assert(valid, 'MATL:runner', 'MATL run-time error: input not allowed')
if isempty(implInput{k}), implInput{end} = []; else implInput{k} = eval(implInput{k}); end
end
STACK = [implInput STACK];
CB_G = [CB_G implInput];
clear implInput k
end
in = STACK(end+nin);
if ~isempty(in), CB_M = [{in} CB_M(1:end-1)]; end
if strcmp(S_OUT,'def'), S_OUT = 0; end
if strcmp(S_OUT,'alt'), S_OUT = 0; end
if isnumeric(S_OUT) && numel(S_OUT) == 1, if S_OUT >= 0 && (S_OUT < 0 || S_OUT > 2*(0)), error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
elseif islogical(S_OUT), if numel(S_OUT) < 0 || numel(S_OUT) > 0, error('MATL:runner', 'MATL run-time error: incorrect output specification'), end
else error('MATL:runner', 'MATL run-time error: output specification not recognized'), end
if isnumeric(S_OUT) && S_OUT > 0, S_OUT = [false(1,S_OUT-(0+1)) true]; end
if isnumeric(S_OUT), nout = S_OUT; else nout = numel(S_OUT); end
if nout>=0, out = cell(1,nout); end
STACK(end+nin) = [];
data = in;
kk = cellfun(@iscell, data);
while any(kk)
data(~kk) = num2cell({data{~kk}}); kk = kk(:).';
for k = find(kk), data{k} = data{k}(:); end
data = vertcat(data{:}); kk = cellfun(@iscell, data); end
for k = 1:numel(data), disp(num2str(data{k}, '%.15g ')), end
clear data kk k
if islogical(S_OUT), out = out(S_OUT); end
STACK = [STACK out];
S_IN = 'def';
S_OUT = 'def';
clear nin nout in out

% Set final conditions
diary off; warning(warningState);
set(0, 'DefaultFigureColormap', defaultColorMap);

end